<?xml version='1.0'?>
<!--
 * Copyright 2001-2009 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */ -->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "jUDDI_User_Guide.ent">
%BOOK_ENTITIES;
]>

<!-- chapter: Using the UDDI-Client -->
<chapter id="chap-Using_jUDDI-Client">
    <title>Using the jUDDI-Client</title>
    
    <!-- section: Introduction -->
    <section id="sect-jUDDI_Client_intro">
        <title>Introduction</title>
        <para>
        The jUDDI project includes a jUDDI-Client
        (<filename>juddi-client-3.0.0.jar</filename>) which can be use to connect to the
        Registry. The client uses the UDDI v3 API so it should be able to connect to any
        UDDI v3 compliant registry, however we have only tested it with jUDDIv3. It maybe
        useful to take a look at the unit-tests in the jUDDIv3-uddi-client module to see
        how the client can be used.
        </para>
    </section>
    
    <!-- section: Configuration -->
    <section id="sect-configuration">
        <title>Configuration</title>

        <para>
        The UDDI client has a configuration file called
        <filename>uddi.xml</filename>. In this file you can set the type
        “Transport” used by the client to talk to the registry. The client tries to locate
        this file on the classpath and uses Apache Commons Configuration [COM-CONFIG] to
        read it. By default the <filename>uddi.xml</filename> file looks like
        </para>
    
        <programlisting language="XML" ><xi:include href="extras/Using_jUDDI-Client_1.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        
    </section>
    
    <!-- section: JAX-WS Transport -->
    <section id="sect-JAX-SW_transport">
        <title>JAX-WS Transport</title>
        <para>
        Using the settings in the <filename>uddi.xml</filename> file from above,
        the client will use JAX-WS to communicate with the (remote) registry server. This
        means that the client needs to have access to a JAX-WS compliant WS stack (such as
        CXF, Axis2 or JBossWS). Make sure to point the JAXWS URLs to where the UDDI client
        can find the WSDL documents.
        </para>
        
        <programlisting  language="XML"><xi:include href="extras/Using_jUDDI-Client_2.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        
        
    </section>
    
    <!-- section: RMI Transport -->
    <section id="sect-RMI_transport">
        <title>RMI Transport</title>

        <para>
        If jUDDIv3 is deployed to an Application Server it is possible to register the
        UDDI Services as RMI services. If this is desired you need to edit the
        <filename>juddiv3.war/WEB-INF/classes/juddiv3.properties</filename> 
        file, on the server. Add the following setting
        </para>
        
        <programlisting language="Java" ><xi:include href="extras/Using_jUDDI-Client_1.java" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

        <para>
        Now at deployment time, the RMI based UDDI services are bound into the Global JNDI
        namespace.
        </para>
        
        <variablelist>
            <varlistentry>
                <term>juddi (class: <classname>org.jnp.interfaces.NamingContext</classname>)</term>
                <listitem>
                    <itemizedlist>
                        <listitem>
                            <para>
                            UDDIPublicationService (class: <classname>org.apache.juddi.rmi.UDDIPublicationService</classname>)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                            UDDICustodyTransferService (class: <classname>org.apache.juddi.rmi.UDDICustodyTransferService</classname>)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                            UDDISubscriptionListenerService (class: <classname>org.apache.juddi.rmi.UDDISubscriptionListenerService</classname>)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                            UDDISecurityService (class: <classname>org.apache.juddi.rmi.UDDISecurityService</classname>)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                            UDDISubscriptionService (class: <classname>org.apache.juddi.rmi.UDDISubscriptionService</classname>)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                            UDDIInquiryService (class: <classname>org.apache.juddi.rmi.UDDIInquiryService</classname>)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>

        </variablelist>
        
        <para>
        Next, on the client side you need to comment out the JAXWS section in the
        <filename>uddi.properties</filename> file and use the RMI Transport section
        instead. Optionally you can set the <literal>java.naming.*</literal> properties.
        In this case we specified setting for connecting to jUDDIv3 deployed to a JBoss
        Application Server. If you like you can set the <literal>java.naming.*</literal>
        properties in a <filename>jndi.properties</filename> file, or as System
        parameters.
        </para>
    
    </section>
    
    <!-- section: InVM Transport -->
    <section id="sect-InVM_transport">
        <title>InVM Transport</title>
        
        <para>
        If you choose to use InVM Transport this means that the jUDDIv3 server is running
        in the same VM as you client. If you are deploying to
        <filename>juddi.war</filename> the server will be started by the
        <classname>org.apache.juddi.RegistryServlet</classname>, but if you are running
        outside any container, you are responsible for starting and stopping the
        <classname>org.apache.juddi.Registry</classname> Service yourself. Make sure to
        call
        </para>
    
        <programlisting language="Java" ><xi:include href="extras/Using_jUDDI-Client_2.java" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

        <para>
        before making any calls to the Registry, and when you are done using the Registry
        (on shutdown) call
        </para>
    
        <programlisting language="Java" ><xi:include href="extras/Using_jUDDI-Client_3.java" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

        <para>
        so the Registry can release any resources it may be holding. To use InVM Transport
        uncomment this section in the <filename>uddi.properties</filename> while
        commenting out the JAXWS and RMI Transport sections.
        </para>
    </section>

    <!-- section: Dependencies -->
    <section id="sect-dependencies">
        <title>Dependencies</title>

        <para>
        The UDDI client depends on <filename>uddi-ws-3.0.0.jar</filename>,
        <filename>commons-configuration-1.5.jar</filename>,
        <filename>commons-collection-3.2.1.jar</filename> and
        <filename>log4j-1.2.13.jar</filename>, plus
        </para>

        <itemizedlist>
            <listitem>
                <para>
                libraries for JAXB if you are not using JDK5.
                </para>
            </listitem>
            <listitem>
                <para>
                JAXWS client libraries when using JAXWS transport (like CXF).
                </para>
            </listitem>
            <listitem>
                <para>
                RMI and JNDI client libraries  when using RMI Transport.
                </para>
            </listitem>
        </itemizedlist>
        
    </section>
    
    <!-- section: Sample Code -->
    <section id="sect-sample_code">
        <title>Sample Code</title>

        <para>
        Sample code on how to use the UDDI client can be found in the
        <literal>uddi-client</literal> module on the jUDDIv3 project. Usually the first
        thing you want to is to make a call to the Registry to obtain an Authentication
        Token. The following code is taken from the unit tests in this module.
        </para>
    
        <programlisting language="Java" ><xi:include href="extras/Using_jUDDI-Client_4.java" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        
        <para>
        Make sure that the publisher, in this case “root” is an existing publisher in the
        Registry and that you are supplying the correct credential to get a successful
        response. If needed check <xref linkend="chap-Authentication" /> to learn more
        about this subject.
        </para>

        <para>
        Another place to look for sample code is the <filename>docs/examples/helloword</filename> 
        directory. Alternatively you can use annotations.
        </para>

    </section>


</chapter>
